#!/home/sirpipat/anaconda2/bin/python

'''
==============================================================================

File Name : SS_PP_h5_ray_path
Purpose : map the SS_PP travel time shift outliers from h5 data_file
Creation Date : 01-29-2019
Last Modified : Thu 22 Mar 2018 04:43:24 PM EDT
Created By : Sirawich Pipatprathanporn

==============================================================================
'''

import numpy as np
from obspy.geodetics.base import gps2dist_azimuth
from geopy.distance import VincentyDistance
import geopy
from matplotlib import pyplot as plt
from mpl_toolkits.basemap import Basemap
import argparse
import h5py
from glob import glob


def main():
    parser = argparse.ArgumentParser(
                       description='map S times')
    parser.add_argument('-f','--h5_files',metavar='*picks.h5',type=str,
                        help='list of h5_files')
    parser.add_argument('-l','--max_dist',metavar='float',type=float,
                        default=180,help='maximum_distance (deg)')
    parser.add_argument('-s','--min_dist',metavar='float',type=float,
                        default=40,help='minimum distance (deg)')
    parser.add_argument('--min_c1',metavar='float',type=float,
                        default=0.5,help='minimum corcoeft_1 allowed')
    parser.add_argument('--min_c2',metavar='float',type=float,
                        default=0.75,help='minimum corcoeft_2 allowed')
    parser.add_argument('--min_lsq1',metavar='float',type=float,
                        default=0.5,help='minimum lsq_1 allowed')
    parser.add_argument('--min_lsq2',metavar='float',type=float,
                        default=0.70,help='minimum lsq_2 allowed')
    parser.add_argument('--max_dt',metavar='float',type=float,
                        default=30.0,help='maximum delta_T')
    parser.add_argument('--dt_shift',metavar='bool',type=bool,
                        default=True,help='mandate updated time shift be less\
                                           than original')

    args = parser.parse_args()
    fig,ax = plt.subplots()
    dat_list = glob(args.h5_files)
    dat_list.sort()
    m = Basemap(projection='mbtfpq',lon_0=180,resolution='c')
    m.drawparallels(np.arange(-90.,120.,30.))
    m.drawmeridians(np.arange(0.,360.,60.))
    m.drawcoastlines()
    pp20_ss20_total = 0

    fname = open('deltPP_deltSS_outliers_withmap.csv','w')
    fname.write('Pdiff-wave time shift, Sdiff-wave time shift, Source lattitude,\
            Source longitude, Receiver lattitude, Receiver longitude,\
            Midpoint lattitude, Midpoint longitude\n')

    for ii in dat_list:
        print ii
        try:
            h5f = h5py.File(ii,'r',driver='core')
        except IOError:
            print 'IOError'
            continue
        try:
            pp20_ss20_total += list_plot(h5f,m,'PP20','SS20',args,fname)
        except IndexError:
            print 'pp20_ss20_index'
            pp20_ss20_total += 0
            continue

    fname.close()
    print 'PP20-SS20 total: ', pp20_ss20_total
    plt.title('SS_PP outliers')
    plt.tight_layout()
    plt.savefig('SS_PP_ray_path_outliers.png')
    plt.show()

def list_plot(h5f,m,pname,sname,args,fname):
    try:
        s_dat = h5f[sname]['pick_info'][:]
        p_dat = h5f[pname]['pick_info'][:]
        s_name = s_dat[:,1]
        p_name = p_dat[:,1]

        c = np.array(list(set(s_name).intersection(set(p_name))))
        s_mask = np.in1d(s_dat[:,1],c)
        p_mask = np.in1d(p_dat[:,1],c)

        slat = np.array([float(ii) for ii in s_dat[s_mask,2]])
        slon = np.array([float(ii) for ii in s_dat[s_mask,3]])
        rlat = np.array([float(ii) for ii in s_dat[s_mask,4]])
        rlon = np.array([float(ii) for ii in s_dat[s_mask,5]])
        gcarc = np.array([float(ii) for ii in s_dat[s_mask,6]])

        S_del_t = np.array([float(ii) for ii in s_dat[s_mask,11]])
        S_update_t = np.array([float(ii) for ii in s_dat[s_mask,12]])
        S_t_shift = S_del_t + S_update_t
        S_corcoeft_1 = np.array([float(ii) for ii in s_dat[s_mask,17]])
        S_corcoeft_2 = np.array([float(ii) for ii in s_dat[s_mask,18]])
        S_lsq_1 = np.array([float(ii) for ii in s_dat[s_mask,23]])
        S_lsq_2 = np.array([float(ii) for ii in s_dat[s_mask,24]])

        P_del_t = np.array([float(ii) for ii in p_dat[p_mask,11]])
        P_update_t = np.array([float(ii) for ii in p_dat[p_mask,12]])
        P_t_shift = P_del_t + P_update_t
        P_corcoeft_1 = np.array([float(ii) for ii in p_dat[p_mask,17]])
        P_corcoeft_2 = np.array([float(ii) for ii in p_dat[p_mask,18]])
        P_lsq_1 = np.array([float(ii) for ii in p_dat[p_mask,23]])
        P_lsq_2 = np.array([float(ii) for ii in p_dat[p_mask,24]])

    except KeyError,IndexError:
        return 0

    pick_count = 0
    for ii in range(len(gcarc)):
        if gcarc[ii] >= args.max_dist or gcarc[ii] <= args.min_dist:
            #print 'gcarc'
            continue
        if args.dt_shift:
            if np.abs(S_del_t[ii]) < np.abs(S_update_t[ii]):
                #print 'S update'
                continue
            if np.abs(P_del_t[ii]) < np.abs(P_update_t[ii]):
                #print 'P update'
                continue
        if S_corcoeft_1[ii] < args.min_c1 or S_corcoeft_2[ii] < args.min_c2:
            #print 'S corcoeft'
            #print corcoeft_1[ii],corcoeft_2[ii]
            continue
        if P_corcoeft_1[ii] < args.min_c1 or P_corcoeft_2[ii] < args.min_c2:
            #print 'P corcoeft'
            #print corcoeft_1[ii],corcoeft_2[ii]
            continue
        if S_lsq_1[ii] < args.min_lsq1 or S_lsq_2[ii] < args.min_lsq2:
            #print 'S lsq'
            #print lsq_1[ii],lsq_2[ii]
            continue
        if P_lsq_1[ii] < args.min_lsq1 or P_lsq_2[ii] < args.min_lsq2:
            #print 'P lsq'
            #print lsq_1[ii],lsq_2[ii]
            continue
        if np.abs(S_t_shift[ii]) > args.max_dt:
            #print 'S_tshift'
            continue
        if np.abs(P_t_shift[ii]) > args.max_dt:
            #print 'P_tshift'
            continue
        if np.abs(S_t_shift[ii] - 2 * P_t_shift[ii]) <= 18:
            #print 'not an outlier'
            continue
        if P_t_shift[ii] < -10 or P_t_shift[ii] > -0:
            continue
        if S_t_shift[ii] < 10 or S_t_shift[ii] > 30:
            continue
        else:
            plot_coords(m,slat[0],slon[0],rlat[ii],rlon[ii])
            mlat,mlon = find_midpoints(slat[ii],slon[ii],rlat[ii],rlon[ii])
            fname.write(str(P_t_shift[ii]))
            fname.write(',')
            fname.write(str(S_t_shift[ii]))
            fname.write(',')
            fname.write(str(slat[ii]))
            fname.write(',')
            fname.write(str(slon[ii]))
            fname.write(',')
            fname.write(str(rlat[ii]))
            fname.write(',')
            fname.write(str(rlon[ii]))
            fname.write(',')
            fname.write(str(mlat))
            fname.write(',')
            fname.write(str(mlon))
            fname.write('\n')
            pick_count += 1

    if pick_count > 0:
        lon,lat = m(slon[0],slat[0])
        m.scatter(lon,lat,color='g',s=30,marker='*',alpha=1,rasterized=True)
    return pick_count

def find_midpoints(slat,slon,rlat,rlon):
    gps = gps2dist_azimuth(slat,slon,rlat,rlon)
    bearing = gps[1]
    dist = gps[0]/2000
    origin = geopy.Point(slat,slon)
    midpoint = VincentyDistance(kilometers=dist).destination(origin,bearing)
    return midpoint[0],midpoint[1]

def plot_coords(m,slat,slon,rlat,rlon):
    stlo,stla = m(rlon,rlat)
    evlo,evla = m(slon,slat)
    mlat,mlon = find_midpoints(slat,slon,rlat,rlon)
    mp_bearing = gps2dist_azimuth(mlat,mlon,rlat,rlon)[1]
    lon,lat = m(mlon,mlat)
    size = 50
    color= 'blue'
    u = size * np.sin(np.radians(mp_bearing))
    v = size * np.cos(np.radians(mp_bearing))
    m.quiver(lon,lat,u,v,color=color,width=0.001,alpha=0.3,headwidth=0.75,
             headlength=1.25,headaxislength=1.125,pivot='mid',
             scale=0.0001000,scale_units='xy',rasterized=True)
    m.scatter(stlo,stla,color='r',marker='v',alpha=0.1,s=5,rasterized=True)

main()


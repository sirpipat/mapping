#!/home/sirpipat/anaconda2/bin/python

'''
==============================================================================

File Name : map_PP_P_amp_rat_avg
Purpose : map PP-P amplitude ratio from h5 data_file
Creation Date : 04-02-2018
Last Modified : Mon 18 Sep 2017 04:43:24 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from obspy.geodetics.base import gps2dist_azimuth
import geopy
from geopy.distance import VincentyDistance
from matplotlib import pyplot as plt
from mpl_toolkits.basemap import Basemap
import argparse
import h5py
from glob import glob


def main():
    parser = argparse.ArgumentParser(
                       description='map S times')
    parser.add_argument('-f','--h5_files',metavar='*picks.h5',type=str,
                        help='list of h5_files')
    parser.add_argument('-l','--max_dist',metavar='float',type=float,
                        default=180,help='maximum_distance (deg)')
    parser.add_argument('-s','--min_dist',metavar='float',type=float,
                        default=40,help='minimum distance (deg)')
    parser.add_argument('--min_c1',metavar='float',type=float,
                        default=0.5,help='minimum corcoeft_1 allowed')
    parser.add_argument('--min_c2',metavar='float',type=float,
                        default=0.75,help='minimum corcoeft_2 allowed')
    parser.add_argument('--min_lsq1',metavar='float',type=float,
                        default=0.5,help='minimum lsq_1 allowed')
    parser.add_argument('--min_lsq2',metavar='float',type=float,
                        default=0.70,help='minimum lsq_2 allowed')
    parser.add_argument('--max_dt',metavar='float',type=float,
                        default=30.0,help='maximum delta_T')
    parser.add_argument('--dt_shift',metavar='bool',type=bool,
                        default=True,help='mandate updated time shift be less\
                                           than original')

    args = parser.parse_args()
    fig,ax = plt.subplots()
    dat_list = glob(args.h5_files)
    dat_list.sort()
    m = Basemap(projection='mbtfpq',lon_0=180,resolution='c')
    m.drawparallels(np.arange(-90.,120.,30.))
    m.drawmeridians(np.arange(0.,360.,60.))
    m.drawcoastlines()
    p5_total = 0
    p10_total = 0
    p20_total = 0
    p40_total = 0

    # arrays storing data for each 10*10 degree bin
    PP_P_amp_rat_sum = np.zeros([35,72])
    PP_P_amp_rat_bin = np.zeros([35,72])

    for ii in dat_list:
        print ii
        try:
            h5f = h5py.File(ii,'r',driver='core')
        except IOError:
            print 'file_error'
            continue
        try:
            p5_total += list_plot(h5f,m,p5_total,'P5',PP_P_amp_rat_sum,
                                  PP_P_amp_rat_bin,args)
        except IndexError:
            print 'p5_index'
            p5_total += 0
        try:
            p10_total += list_plot(h5f,m,p10_total,'P10',PP_P_amp_rat_sum,
                                   PP_P_amp_rat_bin,args)
        except IndexError:
            print 'p10_index'
            p10_total += 0
        try:
            p20_total += list_plot(h5f,m,p20_total,'P20',PP_P_amp_rat_sum,
                                   PP_P_amp_rat_bin,args)
        except IndexError:
            print 'p20_index'
            p20_total += 0
        try:
            p40_total += list_plot(h5f,m,p40_total,'P40',
                                       PP_P_amp_rat_sum,PP_P_amp_rat_bin,args)
        except IndexError:
            print 'p40_index'
            p40_total += 0
            continue

    print 'PP20-P5  total: ', p5_total
    print 'PP20-P10 total: ', p10_total
    print 'PP20-P20 total: ', p20_total
    print 'PP20-P40 total: ', p40_total

    PP_P_amp_rat_avg = PP_P_amp_rat_sum/PP_P_amp_rat_bin
    print PP_P_amp_rat_avg
    for ii in range(len(PP_P_amp_rat_avg)):
        for iii in range(len(PP_P_amp_rat_avg[ii])):
            plot_coords(m,5*ii-85,5*iii-180,PP_P_amp_rat_avg[ii,iii])

    plt.tight_layout()
    plt.savefig('PP-P_amp_rat_avg.png')
    plt.show()

def list_plot(h5f,m,total,name,PP_P_amp_rat_sum,PP_P_amp_rat_bin,args):
    try:
        p_dat = h5f[name]['pick_info'][:]
        pp_dat = h5f['PP20']['pick_info'][:]
        p_name = p_dat[:,1]
        pp_name = pp_dat[:,1]

        c = np.array(list(set(p_name).intersection(set(pp_name))))
        p_mask = np.in1d(p_dat[:,1],c)
        pp_mask = np.in1d(pp_dat[:,1],c)

        slat = np.array([float(ii) for ii in p_dat[p_mask,2]])
        slon = np.array([float(ii) for ii in p_dat[p_mask,3]])
        rlat = np.array([float(ii) for ii in p_dat[p_mask,4]])
        rlon = np.array([float(ii) for ii in p_dat[p_mask,5]])
        gcarc = np.array([float(ii) for ii in p_dat[p_mask,6]])

        P_del_t = np.array([float(ii) for ii in p_dat[p_mask,11]])
        P_update_t = np.array([float(ii) for ii in p_dat[p_mask,12]])
        P_t_shift = P_del_t+P_update_t
        P_corcoeft_1 = np.array([float(ii) for ii in p_dat[p_mask,17]])
        P_corcoeft_2 = np.array([float(ii) for ii in p_dat[p_mask,18]])
        P_lsq_1 = np.array([float(ii) for ii in p_dat[p_mask,23]])
        P_lsq_2 = np.array([float(ii) for ii in p_dat[p_mask,24]])
        P_amp_rat = np.array([float(ii) for ii in p_dat[p_mask,25]])

        PP_del_t = np.array([float(ii) for ii in pp_dat[pp_mask,11]])
        PP_update_t = np.array([float(ii) for ii in pp_dat[pp_mask,12]])
        PP_t_shift = PP_del_t+PP_update_t
        PP_corcoeft_1 = np.array([float(ii) for ii in pp_dat[pp_mask,17]])
        PP_corcoeft_2 = np.array([float(ii) for ii in pp_dat[pp_mask,18]])
        PP_lsq_1 = np.array([float(ii) for ii in pp_dat[pp_mask,23]])
        PP_lsq_2 = np.array([float(ii) for ii in pp_dat[pp_mask,24]])
        PP_amp_rat = np.array([float(ii) for ii in pp_dat[pp_mask,25]])

        P_PP_rat = np.log10(P_amp_rat/PP_amp_rat)

    except KeyError,IndexError:
        return 0

    pick_count = 0
    for ii in range(len(slat)):
        if gcarc[ii] >= args.max_dist or gcarc[ii] <= args.min_dist:
            #print 'gcarc'
            continue
        if args.dt_shift:
            if np.abs(P_del_t[ii]) < np.abs(P_update_t[ii]):
                #print 'P update'
                continue
            if np.abs(PP_del_t[ii]) < np.abs(PP_update_t[ii]):
                #print 'PP update'
                continue
        if P_corcoeft_1[ii] < args.min_c1 or P_corcoeft_2[ii] < args.min_c2:
            #print 'P corcoeft'
            #print corcoeft_1[ii],corcoeft_2[ii]
            continue
        if PP_corcoeft_1[ii] < args.min_c1 or PP_corcoeft_2[ii] < args.min_c2:
            #print 'PP corcoeft'
            #print corcoeft_1[ii],corcoeft_2[ii]
            continue
        if P_lsq_1[ii] < args.min_lsq1 or P_lsq_2[ii] < args.min_lsq2:
            #print 'P lsq'
            #print lsq_1[ii],lsq_2[ii]
            continue
        if PP_lsq_1[ii] < args.min_lsq1 or PP_lsq_2[ii] < args.min_lsq2:
            #print 'PP lsq'
            #print lsq_1[ii],lsq_2[ii]
            continue
        if P_t_shift[ii] > args.max_dt:
            #print 'P_tshift'
            continue
        if PP_t_shift[ii] > args.max_dt:
            #print 'PP_tshift'
            continue
        else:
            mlat,mlon = find_coords(slat[ii],slon[ii],rlat[ii],rlon[ii])
            add_data(mlat,mlon,PP_P_amp_rat_sum,PP_P_amp_rat_bin,P_PP_rat[ii])
            pick_count += 1

    #lon,lat = m(slon[0],slat[0])
    #m.scatter(lon,lat,color='k',s=80,marker='D',rasterized=True)
    return pick_count

def find_coords(slat,slon,rlat,rlon):
    bearing = gps2dist_azimuth(slat,slon,rlat,rlon)[1]
    dist = gps2dist_azimuth(slat,slon,rlat,rlon)[0]/2000.
    origin = geopy.Point(slat,slon)
    destination = VincentyDistance(kilometers=dist).destination(origin,bearing)
    return (destination[0],destination[1])

def add_data(mlat,mlon,PP_P_amp_rat_sum,PP_P_amp_rat_bin,P_PP_rat):
    a = int((mlat+90)/5)
    b = int((mlon+180)/5)
    if b >= 0 and b < 72:
        if a >= 0 and a < 35:
            PP_P_amp_rat_sum[a,b-1:b+1] += P_PP_rat
            PP_P_amp_rat_bin[a,b-1:b+1] += 1
        if a >= 1 and a < 36:
            PP_P_amp_rat_sum[a-1,b-1:b+1] += P_PP_rat
            PP_P_amp_rat_bin[a-1,b-1:b+1] += 1

def plot_coords(m,mlat,mlon,P_PP_rat):
    if abs(P_PP_rat) <= np.log10(1.25):
        size = 10
    elif np.log10(1.25) < abs(P_PP_rat) and abs(P_PP_rat) <= np.log10(1.5):
        size = 20
    elif np.log10(1.5) < abs(P_PP_rat) and abs(P_PP_rat) <= np.log10(2):
        size = 30
    elif np.log10(2) < abs(P_PP_rat) and abs(P_PP_rat) <= np.log10(3):
        size = 40
    elif np.log10(3) < abs(P_PP_rat) and abs(P_PP_rat) <= np.log10(5):
        size = 50
    elif np.log10(5) < abs(P_PP_rat) and abs(P_PP_rat) <= np.log10(10):
        size = 60
    elif abs(P_PP_rat) > np.log10(10):
        size = 70
    else:
        size = 5

    if P_PP_rat <= 0:
        color = 'blue'
        marker = 'o'
        facecolor='none'
    elif P_PP_rat > 0:
        color = 'red'
        marker = 'x'
        facecolor='red'
    else:
        color = 'black'
        marker = 's'
        facecolor = 'black'

    lon,lat = m(mlon,mlat)
    m.scatter(lon,lat,linewidth=1,color=color,alpha=1,
              s=5*size,marker=marker,facecolor=facecolor,rasterized=True)

main()

#!/home/sirpipat/anaconda2/bin/python

'''
==============================================================================

File Name : plot_SSS_SS_amp_rat_h5
Purpose : plot SS-S amplitude ratio from h5 data_file
Creation Date : 03-23-2018
Last Modified : Fri 23 Mar 2018 04:43:24 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from geopy.distance import vincenty
from matplotlib import pyplot as plt
import argparse
import h5py
from glob import glob


def main():
    parser = argparse.ArgumentParser(
                       description='plot SSS-SS amp ratio')
    parser.add_argument('-f','--h5_files',metavar='*picks.h5',type=str,
                        help='list of h5_files')
    parser.add_argument('-l','--max_dist',metavar='float',type=float,
                        default=180,help='maximum_distance (deg)')
    parser.add_argument('-s','--min_dist',metavar='float',type=float,
                        default=40,help='minimum distance (deg)')
    parser.add_argument('--min_c1',metavar='float',type=float,
                        default=0.5,help='minimum corcoeft_1 allowed')
    parser.add_argument('--min_c2',metavar='float',type=float,
                        default=0.75,help='minimum corcoeft_2 allowed')
    parser.add_argument('--min_lsq1',metavar='float',type=float,
                        default=0.5,help='minimum lsq_1 allowed')
    parser.add_argument('--min_lsq2',metavar='float',type=float,
                        default=0.70,help='minimum lsq_2 allowed')
    parser.add_argument('--max_dt',metavar='float',type=float,
                        default=30.0,help='maximum delta_T')
    parser.add_argument('--dt_shift',metavar='bool',type=bool,
                        default=True,help='mandate updated time shift be less\
                                           than original')

    args = parser.parse_args()
    fig,m = plt.subplots()
    dat_list = glob(args.h5_files)
    dat_list.sort()
    ss_total = 0
    for ii in dat_list:
        print ii
        h5f = h5py.File(ii,'r',driver='core')
        try:
            ss_total += list_plot(h5f,m,ss_total,'SS20',args)
        except IndexError:
            print 'ss20_index'
            ss_total += 0
            continue

    print 'SSS30-SS20 total: ', ss_total
    plt.xlabel('distance (degrees)')
    plt.ylabel('log10((SSS_d_amp/SS_d_amp)/(SSS_s_amp/SS_s_amp))')
    plt.title('SSS-SS amplitude ratio vs distance')
    plt.tight_layout()
    plt.savefig('SSS-SS_amp_rat.png')
    plt.show()

def list_plot(h5f,m,total,name,args):
    try:
        ss_dat = h5f[name]['pick_info'][:]
        sss_dat = h5f['SSS30']['pick_info'][:]
        ss_name = ss_dat[:,1]
        sss_name = sss_dat[:,1]

        c = np.array(list(set(ss_name).intersection(set(sss_name))))
        ss_mask = np.in1d(ss_dat[:,1],c)
        sss_mask = np.in1d(sss_dat[:,1],c)

        slat = np.array([float(ii) for ii in ss_dat[ss_mask,2]])
        slon = np.array([float(ii) for ii in ss_dat[ss_mask,3]])
        rlat = np.array([float(ii) for ii in ss_dat[ss_mask,4]])
        rlon = np.array([float(ii) for ii in ss_dat[ss_mask,5]])
        gcarc = np.array([float(ii) for ii in ss_dat[ss_mask,6]])

        SS_del_t = np.array([float(ii) for ii in ss_dat[ss_mask,11]])
        SS_update_t = np.array([float(ii) for ii in ss_dat[ss_mask,12]])
        SS_t_shift = SS_del_t + SS_update_t
        SS_corcoeft_1 = np.array([float(ii) for ii in ss_dat[ss_mask,17]])
        SS_corcoeft_2 = np.array([float(ii) for ii in ss_dat[ss_mask,18]])
        SS_s_amp = np.array([float(ii) for ii in ss_dat[ss_mask,19]])
        SS_d_amp = np.array([float(ii) for ii in ss_dat[ss_mask,20]])
        SS_lsq_1 = np.array([float(ii) for ii in ss_dat[ss_mask,23]])
        SS_lsq_2 = np.array([float(ii) for ii in ss_dat[ss_mask,24]])

        SSS_del_t = np.array([float(ii) for ii in sss_dat[sss_mask,11]])
        SSS_update_t = np.array([float(ii) for ii in sss_dat[sss_mask,12]])
        SSS_t_shift = SSS_del_t + SSS_update_t
        SSS_corcoeft_1 = np.array([float(ii) for ii in sss_dat[sss_mask,17]])
        SSS_corcoeft_2 = np.array([float(ii) for ii in sss_dat[sss_mask,18]])
        SSS_s_amp = np.array([float(ii) for ii in sss_dat[sss_mask,19]])
        SSS_d_amp = np.array([float(ii) for ii in sss_dat[sss_mask,20]])
        SSS_lsq_1 = np.array([float(ii) for ii in sss_dat[sss_mask,23]])
        SSS_lsq_2 = np.array([float(ii) for ii in sss_dat[sss_mask,24]])


        time_diff = SSS_t_shift-SS_t_shift
        SSS_SS_amp_rat = (SSS_d_amp/SS_d_amp) / (SSS_s_amp/SS_s_amp)

    except KeyError,IndexError:
        return 0

    pick_count = 0
    for ii in range(len(slat)):
        if gcarc[ii] >= args.max_dist or gcarc[ii] <= args.min_dist:
            #print 'gcarc'
            continue
        if args.dt_shift:
            if np.abs(SS_del_t[ii]) < np.abs(SS_update_t[ii]):
                #print 'SS update'
                continue
            if np.abs(SSS_del_t[ii]) < np.abs(SSS_update_t[ii]):
                #print 'SSS update'
                continue
        if SS_corcoeft_1[ii] < args.min_c1 or SS_corcoeft_2[ii] < args.min_c2:
            #print 'SSS corcoeft'
            #print corcoeft_1[ii],corcoeft_2[ii]
            continue
        if SSS_corcoeft_1[ii] < args.min_c1 or SSS_corcoeft_2[ii] < args.min_c2:
            #print 'SSS corcoeft'
            #print corcoeft_1[ii],corcoeft_2[ii]
            continue
        if SS_lsq_1[ii] < args.min_lsq1 or SS_lsq_2[ii] < args.min_lsq2:
            #print 'SS lsq'
            #print lsq_1[ii],lsq_2[ii]
            continue
        if SSS_lsq_1[ii] < args.min_lsq1 or SSS_lsq_2[ii] < args.min_lsq2:
            #print 'SSS lsq'
            #print lsq_1[ii],lsq_2[ii]
            continue
        if SS_t_shift[ii] > args.max_dt:
            #print 'SS_tshift'
            continue
        if SSS_t_shift[ii] > args.max_dt:
            #print 'SSS_tshift'
            continue
        else:
            plot_coords(m,slat[ii],slon[ii],rlat[ii],rlon[ii],SSS_SS_amp_rat[ii])
            pick_count += 1

    return pick_count

def plot_coords(m,slat,slon,rlat,rlon,SSS_SS_amp_rat):
    dist = vincenty((slat,slon),(rlat,rlon)).nautical/60
    m.scatter(dist,SSS_SS_amp_rat,color='k',s=1,alpha=0.1,
              rasterized=True)

main()


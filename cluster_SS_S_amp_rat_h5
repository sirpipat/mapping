#!/home/sirpipat/anaconda2/bin/python

'''
==============================================================================

File Name : cluster_SS_S_amp_rat_h5_copy
Purpose : make a cluster of SS-S amplitude ratio from h5 data_file
Creation Date : 04-16-2018
Last Modified : Thu 22 Mar 2018 04:43:24 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from geopy.distance import vincenty
from matplotlib import pyplot as plt
import argparse
import h5py
from glob import glob


def main():
    parser = argparse.ArgumentParser( 
                       description='map S times')
    parser.add_argument('-f','--h5_files',metavar='*picks.h5',type=str,
                        help='list of h5_files')
    parser.add_argument('-l','--max_dist',metavar='float',type=float,
                        default=180,help='maximum_distance (deg)')
    parser.add_argument('-s','--min_dist',metavar='float',type=float,
                        default=40,help='minimum distance (deg)')
    parser.add_argument('--min_c1',metavar='float',type=float,
                        default=0.5,help='minimum corcoeft_1 allowed')
    parser.add_argument('--min_c2',metavar='float',type=float,
                        default=0.75,help='minimum corcoeft_2 allowed')
    parser.add_argument('--min_lsq1',metavar='float',type=float,
                        default=0.5,help='minimum lsq_1 allowed')
    parser.add_argument('--min_lsq2',metavar='float',type=float,
                        default=0.70,help='minimum lsq_2 allowed')
    parser.add_argument('--max_dt',metavar='float',type=float,
                        default=30.0,help='maximum delta_T')
    parser.add_argument('--dt_shift',metavar='bool',type=bool,
                        default=True,help='mandate updated time shift be less\
                                           than original')

    args = parser.parse_args()
    #fig,m = plt.subplots()
    m=1
    dat_list = glob(args.h5_files)
    dat_list.sort()
    s10_total = 0
    s20_total = 0
    sdiff20_total = 0

    # each bin interval is 2 degrees
    # dist_bin[0]  = 60 +- 1 degrees
    # dist_bin[89] = 149 +- 1 degrees
    dist_bin = np.zeros(90)
    avg_bin = np.zeros(90)

    fname = open('SS-S_cluster.txt','w')

    for ii in dat_list:
        print ii
        try:
            h5f = h5py.File(ii,'r',driver='core')
        except IOError:
            print 'IOError'
            continue
        try:
            s10_total += list_plot(h5f,m,s10_total,'S10',args,dist_bin,avg_bin,
                                   fname)
        except IndexError:
            print 's10_index'
            s10_total += 0
        try:
            s20_total += list_plot(h5f,m,s20_total,'S20',args,dist_bin,avg_bin,
                                   fname)
        except IndexError:
            print 's20_index'
            s20_total += 0
        try:
            sdiff20_total += list_plot(h5f,m,sdiff20_total,'Sdiff20',args,
                                       dist_bin,avg_bin,fname)
        except IndexError:
            print 'sdiff_index'
            sdiff20_total += 0
            continue

    fname.close()
    print 'SS20-S10 total: ', s10_total
    print 'SS20-S20 total: ', s20_total
    print 'SS20-Sdiff20 total: ', sdiff20_total

    #for ii in range(len(avg_bin)):
    #    if dist_bin[ii] != 0:
    #        plt.scatter(ii+60,avg_bin[ii]/dist_bin[ii],color='orange')

    ##m.set_ylim(0,2)
    #plt.xlabel('distance (degrees)')
    #plt.ylabel('log10((SS_d_amp/S_d_amp)/(SS_s_amp/S_s_amp))')
    #plt.title('SS-S amplitude ratio vs distance')
    #plt.tight_layout()
    #plt.savefig('SS-S_amp_rat_with_cluster.png')
    #plt.show()

def list_plot(h5f,m,total,name,args,dist_bin,avg_bin,fname):
    try:
        s_dat = h5f[name]['pick_info'][:]
        ss_dat = h5f['SS20']['pick_info'][:]
        s_name = s_dat[:,1]
        ss_name = ss_dat[:,1]

        c = np.array(list(set(s_name).intersection(set(ss_name))))
        s_mask = np.in1d(s_dat[:,1],c)
        ss_mask = np.in1d(ss_dat[:,1],c)

        slat = np.array([float(ii) for ii in s_dat[s_mask,2]])
        slon = np.array([float(ii) for ii in s_dat[s_mask,3]])
        rlat = np.array([float(ii) for ii in s_dat[s_mask,4]])
        rlon = np.array([float(ii) for ii in s_dat[s_mask,5]])
        gcarc = np.array([float(ii) for ii in s_dat[s_mask,6]])

        S_del_t = np.array([float(ii) for ii in s_dat[s_mask,11]])
        S_update_t = np.array([float(ii) for ii in s_dat[s_mask,12]])
        S_t_shift = S_del_t + S_update_t
        S_corcoeft_1 = np.array([float(ii) for ii in s_dat[s_mask,17]])
        S_corcoeft_2 = np.array([float(ii) for ii in s_dat[s_mask,18]])
        S_s_amp = np.array([float(ii) for ii in s_dat[s_mask,19]])
        S_d_amp = np.array([float(ii) for ii in s_dat[s_mask,20]])
        S_lsq_1 = np.array([float(ii) for ii in s_dat[s_mask,23]])
        S_lsq_2 = np.array([float(ii) for ii in s_dat[s_mask,24]])

        SS_del_t = np.array([float(ii) for ii in ss_dat[ss_mask,11]])
        SS_update_t = np.array([float(ii) for ii in ss_dat[ss_mask,12]])
        SS_t_shift = SS_del_t + SS_update_t
        SS_corcoeft_1 = np.array([float(ii) for ii in ss_dat[ss_mask,17]])
        SS_corcoeft_2 = np.array([float(ii) for ii in ss_dat[ss_mask,18]])
        SS_s_amp = np.array([float(ii) for ii in ss_dat[ss_mask,19]])
        SS_d_amp = np.array([float(ii) for ii in ss_dat[ss_mask,20]])
        SS_lsq_1 = np.array([float(ii) for ii in ss_dat[ss_mask,23]])
        SS_lsq_2 = np.array([float(ii) for ii in ss_dat[ss_mask,24]])

        time_diff = SS_t_shift-S_t_shift
        SS_S_amp_rat = np.log10((SS_d_amp/S_d_amp) / (SS_s_amp/S_s_amp))

    except KeyError,IndexError:
        return 0

    pick_count = 0
    for ii in range(len(slat)):
        if gcarc[ii] >= args.max_dist or gcarc[ii] <= args.min_dist:
            #print 'gcarc'
            continue
        if args.dt_shift:
            if np.abs(S_del_t[ii]) < np.abs(S_update_t[ii]):
                #print 'S update'
                continue
            if np.abs(SS_del_t[ii]) < np.abs(SS_update_t[ii]):
                #print 'SS update'
                continue
        if S_corcoeft_1[ii] < args.min_c1 or S_corcoeft_2[ii] < args.min_c2:
            #print 'S corcoeft'
            #print corcoeft_1[ii],corcoeft_2[ii]
            continue
        if SS_corcoeft_1[ii] < args.min_c1 or SS_corcoeft_2[ii] < args.min_c2:
            #print 'SS corcoeft'
            #print corcoeft_1[ii],corcoeft_2[ii]
            continue
        if S_lsq_1[ii] < args.min_lsq1 or S_lsq_2[ii] < args.min_lsq2:
            #print 'S lsq'
            #print lsq_1[ii],lsq_2[ii]
            continue
        if SS_lsq_1[ii] < args.min_lsq1 or SS_lsq_2[ii] < args.min_lsq2:
            #print 'SS lsq'
            #print lsq_1[ii],lsq_2[ii]
            continue
        if S_t_shift[ii] > args.max_dt:
            #print 'S_tshift'
            continue
        if SS_t_shift[ii] > args.max_dt:
            #print 'SS_tshift'
            continue
        if SS_S_amp_rat[ii] == 0:
            continue
        else:
            dist = plot_coords(m,slat[ii],slon[ii],rlat[ii],rlon[ii],
                               SS_S_amp_rat[ii])
            fname.write(str(dist))
            fname.write('\t')
            fname.write(str(SS_S_amp_rat[ii]))
            fname.write('\n')
            dist = int(dist)-59
            if dist >= 0 and dist <= 89:
                dist_bin[dist] += 1
                avg_bin[dist] += SS_S_amp_rat[ii]
            if dist >= 1 and dist <= 90:
                dist_bin[dist-1] += 1
                avg_bin[dist-1] += SS_S_amp_rat[ii]
            pick_count += 1

    return pick_count

def plot_coords(m,slat,slon,rlat,rlon,SS_S_amp_rat):
    dist = vincenty((slat,slon),(rlat,rlon)).nautical/60
    #m.scatter(dist,SS_S_amp_rat,color='k',s=1,alpha=0.1,
    #          rasterized=True)
    return dist

main()

